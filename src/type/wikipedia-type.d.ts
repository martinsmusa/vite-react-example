/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/page/": {
    /**
     * List page-related API entry points.
     * @description Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     */
    get: {
      responses: {
        /** @description A list of page-related API end points. */
        200: {
          content: {
            "application/json": components["schemas"]["listing"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/title/{title}": {
    /**
     * Get revision metadata for a title.
     * @description Returns the revision metadata for the given title. If a revision ID is provided,
     * metadata for that revision is returned, otherwise the latest revision ID is assumed.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
     */
    get: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
        };
      };
      responses: {
        /** @description The latest revision metadata for the provided title. */
        200: {
          content: {
            "application/json": components["schemas"]["revision"];
          };
        };
        /**
         * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
         * To avoid these redirects, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
         * title normalization client side.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        301: {
          content: never;
        };
        /**
         * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
         * The `location` header points to the redirect target.
         * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        302: {
          content: never;
        };
        /** @description Unknown page title or no revisions found. */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/title/{title}/{revision}": {
    /**
     * Get revision metadata for a title.
     * @description Returns the revision metadata for the given title. If a revision ID is provided,
     * metadata for that revision is returned, otherwise the latest revision ID is assumed.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
     */
    get: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
          /** @description The revision id */
          revision: number;
        };
      };
      responses: {
        /** @description The latest revision metadata for the provided title. */
        200: {
          content: {
            "application/json": components["schemas"]["revision"];
          };
        };
        /**
         * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
         * To avoid these redirects, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
         * title normalization client side.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        301: {
          content: never;
        };
        /**
         * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
         * The `location` header points to the redirect target.
         * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        302: {
          content: never;
        };
        /** @description Unknown page title or no revisions found. */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/html/{title}": {
    /**
     * Get latest HTML for a title.
     * @description Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
           * To get a 200 response instead, supply `false` to the `redirect` parameter.
           */
          redirect?: boolean;
          /**
           * @description Whether to temporary stash data-parsoid in order to support transforming the
           * modified content later. If this parameter is set, requests are rate-limited on
           * a per-client basis (max 5 requests per second per client)
           */
          stash?: boolean;
        };
        header?: {
          /** @description The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language. */
          "Accept-Language"?: string;
        };
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
        };
      };
      responses: {
        /**
         * @description The latest HTML for the given page title.
         *
         * See [the MediaWiki DOM
         * spec](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec) for a
         * description of the MediaWiki-specific semantic markup in this HTML.
         * Note that additional metadata is available in the HTML head.
         */
        200: {
          headers: {
            /**
             * @description ETag header indicating the revision and render timeuuid
             * separated by a slash:
             * "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc"
             * This ETag can be passed to the HTML save end point (as
             * `base_etag` POST parameter), and can also be used to retrieve
             * the exact corresponding data-parsoid metadata, by requesting
             * the specific `revision` and `tid` indicated by the `ETag`.
             */
            ETag?: string;
          };
          content: {
            "text/html; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/HTML/2.1.0\"": string;
            "application/json": Record<string, never>;
          };
        };
        /**
         * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
         * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
         * title normalization client-side.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        301: {
          content: never;
        };
        /**
         * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
         * The `location` header points to the redirect target, and the body contains the actual page contents as HTML.
         * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        302: {
          content: never;
        };
        /** @description Unknown page title */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/html/{title}/{revision}": {
    /**
     * Get HTML for a specific title/revision & optionally timeuuid.
     * @description Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     */
    get: operations["getFormatRevision"];
  };
  "/page/data-parsoid/{title}/{revision}/{tid}": {
    /**
     * Get data-parsoid metadata for a specific title/revision/tid.
     * @description Data-parsoid is metadata used by
     * [Parsoid](https://www.mediawiki.org/wiki/Parsoid) to support clean
     * round-tripping conversions between HTML and Wikitext. Among other
     * things, it contains the original Wikitext offsets of each HTML
     * element, keyed by element ID. The format is unstable.
     *
     * The metadata in data-parsoid is specific to a specific HTML render.
     * For this reason, you need to supply the exact `revision` and `tid` as
     * provided in the `ETag` header of the HTML response.
     *
     * Stability: [Stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
           * To get a 200 response instead, supply `false` to the `redirect` parameter.
           */
          redirect?: boolean;
        };
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
          /** @description The revision */
          revision: number;
          /** @description The revision's time ID */
          tid: string;
        };
      };
      responses: {
        /** @description The latest Parsoid data for the given page */
        200: {
          headers: {
            /** @description Revision / tid: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
            ETag?: string;
          };
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/data-parsoid/2.1.0": components["schemas"]["data-parsoid"];
          };
        };
        /**
         * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
         * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
         * title normalization client-side.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        301: {
          content: never;
        };
        /**
         * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
         * The `location` header points to the redirect target, and the body contains the actual data-parsoid for the redirect page.
         * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        302: {
          content: never;
        };
        /** @description Invalid revision */
        400: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Access to the specific revision is restricted */
        403: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Unknown page, revision or tid */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/lint/{title}": {
    /**
     * Get the linter errors for a specific title/revision.
     * @description Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
        };
      };
      responses: {
        /**
         * @description The lint errors for the given page and optionally revision.
         *
         * See [the Linter extension docs](https://www.mediawiki.org/wiki/Extension:Linter) for more
         * details.
         */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /**
         * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
         * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
         * title normalization client-side.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        301: {
          content: never;
        };
        /**
         * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
         * The `location` header points to the redirect target, and the body contains the actual page revision contents as HTML.
         * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        302: {
          content: never;
        };
        /** @description Invalid revision or tid */
        400: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Access to the specific revision is restricted */
        403: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Unknown page, revision or tid */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/lint/{title}/{revision}": {
    /**
     * Get the linter errors for a specific title/revision.
     * @description Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
          /** @description The revision */
          revision: number;
        };
      };
      responses: {
        /**
         * @description The lint errors for the given page and optionally revision.
         *
         * See [the Linter extension docs](https://www.mediawiki.org/wiki/Extension:Linter) for more
         * details.
         */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /**
         * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
         * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
         * title normalization client-side.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        301: {
          content: never;
        };
        /**
         * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
         * The `location` header points to the redirect target, and the body contains the actual page revision contents as HTML.
         * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        302: {
          content: never;
        };
        /** @description Invalid revision or tid */
        400: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Access to the specific revision is restricted */
        403: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Unknown page, revision or tid */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/segments/{title}": {
    /**
     * Fetches a segmented page to be used in machine translation
     * @description Use this end point to fetch the segmented content of a page. Clients should
     * use the returned content in conjunction with the [language transform
     * API](https://wikimedia.org/api/rest_v1/#!/Transform).
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
        };
      };
      responses: {
        /** @description The segmented page for the given title and revision */
        200: {
          content: {
            "application/json": {
              /** @description The source language of the page */
              sourceLanguage?: string;
              /** @description The title of the segmented page returned */
              title?: string;
              /** @description The revision ID of the segmented page */
              revision?: number;
              /** @description The segmented HTML body of the contents of the page */
              segmentedContent?: string;
            };
          };
        };
        /** @description Invalid revision */
        400: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Access to the specific revision is restricted */
        403: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Unknown page or revision */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/segments/{title}/{revision}": {
    /**
     * Fetches a segmented page to be used in machine translation
     * @description Use this end point to fetch the segmented content of a page. Clients should
     * use the returned content in conjunction with the [language transform
     * API](https://wikimedia.org/api/rest_v1/#!/Transform).
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
          /** @description The revision id */
          revision: number;
        };
      };
      responses: {
        /** @description The segmented page for the given title and revision */
        200: {
          content: {
            "application/json": {
              /** @description The source language of the page */
              sourceLanguage?: string;
              /** @description The title of the segmented page returned */
              title?: string;
              /** @description The revision ID of the segmented page */
              revision?: number;
              /** @description The segmented HTML body of the contents of the page */
              segmentedContent?: string;
            };
          };
        };
        /** @description Invalid revision */
        400: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Access to the specific revision is restricted */
        403: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Unknown page or revision */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/mobile-sections/{title}": {
    /**
     * Get mobile-optimized HTML sections for a title.
     * @description Retrieve the latest HTML for a page title optimised for viewing with
     * native mobile applications. Note that the output is split by sections.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    get: operations["getSections"];
  };
  "/page/mobile-sections/{title}/{revision}": {
    /**
     * Get mobile-optimized HTML sections for a title.
     * @description Retrieve the latest HTML for a page title optimised for viewing with
     * native mobile applications. Note that the output is split by sections.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    get: operations["getSectionsWithRevision"];
  };
  "/page/mobile-sections-lead/{title}": {
    /**
     * Get mobile-optimized HTML lead section and metadata for a title.
     * @description Retrieve the lead section of the latest HTML for a page title optimised
     * for viewing with native mobile applications.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    get: operations["getSectionsLead"];
  };
  "/page/mobile-sections-lead/{title}/{revision}": {
    /**
     * Get mobile-optimized HTML lead section and metadata for a title.
     * @description Retrieve the lead section of the latest HTML for a page title optimised
     * for viewing with native mobile applications.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    get: operations["getSectionsLeadWithRevision"];
  };
  "/page/mobile-sections-remaining/{title}": {
    /**
     * Get non-lead mobile-optimized HTML sections for a title.
     * @description Retrieve the remainder of the latest HTML (without the lead section) for
     * a page title optimised for viewing with native mobile applications,
     * provided as a JSON object containing the sections.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    get: operations["getSectionsRemaining"];
  };
  "/page/mobile-sections-remaining/{title}/{revision}": {
    /**
     * Get non-lead mobile-optimized HTML sections for a title.
     * @description Retrieve the remainder of the latest HTML (without the lead section) for
     * a page title optimised for viewing with native mobile applications,
     * provided as a JSON object containing the sections.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    get: operations["getSectionsRemainingWithRevision"];
  };
  "/page/summary/{title}": {
    /**
     * Get basic metadata and simplified article introduction.
     * @description The summary response includes an extract of the first paragraph of the page in plain text
     * and HTML as well as the type of page. This is useful for page previews (fka. Hovercards,
     * aka. Popups) on the web and link previews in the apps.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Stable)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
           * To get a 200 response instead, supply `false` to the `redirect` parameter.
           */
          redirect?: boolean;
        };
        header?: {
          /** @description The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language. */
          "Accept-Language"?: string;
        };
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
        };
      };
      responses: {
        /** @description The summary for the given page */
        200: {
          headers: {
            /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
            ETag?: string;
          };
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Summary/1.4.2\"": components["schemas"]["summary"];
          };
        };
        /**
         * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
         * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
         * title normalization client-side.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        301: {
          content: never;
        };
        /**
         * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
         * The `location` header points to the redirect target.
         * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        302: {
          content: never;
        };
        /** @description Unknown page title */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/media-list/{title}": {
    /**
     * Get list of media files used on a page.
     * @description Gets the list of media items (images, audio, and video) in the order in which they appear on a
     * given wiki page.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Unstable)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    get: operations["getContent-media-list"];
  };
  "/page/media-list/{title}/{revision}": {
    /**
     * Get list of media files used on a page.
     * @description Gets the list of media items (images, audio, and video) in the order in which they appear on a
     * given wiki page.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Unstable)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    get: operations["getContentWithRevision-media-list"];
  };
  "/page/mobile-html/{title}": {
    /**
     * Get page content HTML optimized for mobile consumption.
     * @description Gets the content HTML optimized for mobile consumption for the given page. This content
     * is derived from Parsoid HTML (see `/page/html/{title}` endpoint).
     * The difference to Parsoid HTML is roughly:
     * * Some elements and attributes not needed for the reading case are removed.
     * * LeadIntroductionTransform: The introductory paragraph is moved before an infobox.
     * * RedLinks: Red links are flattened (=turned into span elements).
     * * WidenImage: images that should be displayed in gallery are widened.
     * * Section headings are slightly changed by wrapping the headings inside a div and adding
     *   a span element inside the new div for the edit buttons.
     * * Additional classes are added to img elements to fix issues with non-white backgrounds.
     *   See Theme support below for instructions on how to enable that.
     * * Pagelib CSS files needed to display the content are referenced.
     * * LazyLoadTransform: server-side portion/prep for lazy loading of images.
     * * CollapseTable: server-side portion/prep for collapsing tables.
     *
     * What's not included? What parts of the PageLibrary does a client still have to do?
     * * Theme support: Themes can be turned on by adding a theme class to the root <html> tag.
     *   Possible class names are:
     *   * `pagelib_theme_default`
     *   * `pagelib_theme_dark`
     *   * `pagelib_theme_black`
     *   * `pagelib_theme_sepia`
     *
     *   The pagelib JS has functionality to do that: ThemeTransform.setTheme(document, theme).
     * * Dim images: DimImagesTransform.dim(window, enable)
     * * PlatformTransform.classify(window) to trigger Android and iOS app specific CSS rules
     * * LazyLoadTransformer: client side companion of LazyLoadTransform (note the extra *er*
     * here)
     * * FooterTransformer: seems to be more UI than content, requires I18N, too
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: operations["getContent-mobile-html"];
  };
  "/page/mobile-html/{title}/{revision}": {
    /**
     * Get page content HTML optimized for mobile consumption.
     * @description Gets the content HTML optimized for mobile consumption for the given page. This content
     * is derived from Parsoid HTML (see `/page/html/{title}` endpoint).
     * The difference to Parsoid HTML is roughly:
     * * Some elements and attributes not needed for the reading case are removed.
     * * LeadIntroductionTransform: The introductory paragraph is moved before an infobox.
     * * RedLinks: Red links are flattened (=turned into span elements).
     * * WidenImage: images that should be displayed in gallery are widened.
     * * Section headings are slightly changed by wrapping the headings inside a div and adding
     *   a span element inside the new div for the edit buttons.
     * * Additional classes are added to img elements to fix issues with non-white backgrounds.
     *   See Theme support below for instructions on how to enable that.
     * * Pagelib CSS files needed to display the content are referenced.
     * * LazyLoadTransform: server-side portion/prep for lazy loading of images.
     * * CollapseTable: server-side portion/prep for collapsing tables.
     *
     * What's not included? What parts of the PageLibrary does a client still have to do?
     * * Theme support: Themes can be turned on by adding a theme class to the root <html> tag.
     *   Possible class names are:
     *   * `pagelib_theme_default`
     *   * `pagelib_theme_dark`
     *   * `pagelib_theme_black`
     *   * `pagelib_theme_sepia`
     *
     *   The pagelib JS has functionality to do that: ThemeTransform.setTheme(document, theme).
     * * Dim images: DimImagesTransform.dim(window, enable)
     * * PlatformTransform.classify(window) to trigger Android and iOS app specific CSS rules
     * * LazyLoadTransformer: client side companion of LazyLoadTransform (note the extra *er*
     * here)
     * * FooterTransformer: seems to be more UI than content, requires I18N, too
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: operations["getContentWithRevision-mobile-html"];
  };
  "/page/mobile-html-offline-resources/{title}": {
    /**
     * Get styles and scripts for offline consumption of mobile-html-formatted pages
     * @description Provides links to scripts and styles needed for viewing mobile-html-formatted pages offline.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
        };
      };
      responses: {
        /** @description links to scripts and styles to accompany the mobile-html of the page for offline consumption */
        200: {
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Mobile-HTML-Offline-Resources/1.2.1\"": string;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/mobile-html-offline-resources/{title}/{revision}": {
    /**
     * Get styles and scripts for offline consumption of mobile-html-formatted pages
     * @description Provides links to scripts and styles needed for viewing mobile-html-formatted pages offline.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
          /** @description Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher. */
          revision: number;
        };
      };
      responses: {
        /** @description links to scripts and styles to accompany the mobile-html of the page for offline consumption */
        200: {
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Mobile-HTML-Offline-Resources/1.2.1\"": string;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/related/{title}": {
    /**
     * Get pages related to the given title
     * @description Returns summaries for 20 pages related to the given page. Summaries include
     * page title, namespace and id along with short text description of the page
     * and a thumbnail.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: operations["getRelatedPages"];
  };
  "/page/random/{format}": {
    /**
     * Get content for a random page
     * @description Redirects the client to the URI for the desired format for a random page title.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: {
      parameters: {
        path: {
          /** @description The desired return format */
          format: "title" | "html" | "summary" | "related" | "mobile-sections" | "mobile-sections-lead";
        };
      };
      responses: {
        /** @description The redirect to the desired format URI for a random page */
        303: {
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Random/0.7.0\"": Record<string, never>;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/talk/{title}": {
    /**
     * Get structured talk page contents
     * @description Gets structured talk page contents for the provided title.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Experimental)
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
           * To get a 200 response instead, supply `false` to the `redirect` parameter.
           */
          redirect?: boolean;
        };
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
        };
      };
      responses: {
        /** @description structured talk page JSON. */
        200: {
          headers: {
            /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
            ETag?: string;
          };
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Talk/0.1.0\"": string;
          };
        };
        /**
         * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
         * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
         * title normalization client-side.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        301: {
          content: never;
        };
        /**
         * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
         * The `location` header points to the redirect target.
         * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        302: {
          content: never;
        };
        /** @description Unknown page title */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/talk/{title}/{revision}": {
    /**
     * Get structured talk page contents
     * @description Gets structured talk page contents for the provided title.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Experimental)
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
           * To get a 200 response instead, supply `false` to the `redirect` parameter.
           */
          redirect?: boolean;
        };
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
          /** @description Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher. */
          revision: number;
        };
      };
      responses: {
        /** @description structured talk page JSON. */
        200: {
          headers: {
            /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
            ETag?: string;
          };
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Talk/0.1.0\"": string;
          };
        };
        /**
         * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
         * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
         * title normalization client-side.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        301: {
          content: never;
        };
        /**
         * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
         * The `location` header points to the redirect target.
         * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
         *
         * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
         * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
         */
        302: {
          content: never;
        };
        /** @description Unknown page title */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/pdf/{title}": {
    /**
     * Get a page as PDF
     * @description Renders the page content as PDF. Format and type are optional parameters and
     * the default values are "a4" for format and "desktop" for type.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
        };
      };
      responses: {
        /** @description The PDF render of an article */
        200: {
          headers: {
            /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
            ETag?: string;
          };
          content: {
            "application/pdf": string;
          };
        };
        /** @description Unknown page title */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description A response is unavailable because service queue is busy or full */
        503: {
          content: {
            "application/json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/pdf/{title}/{format}": {
    /**
     * Get a page as PDF
     * @description Renders the page content as PDF. Format and type are optional parameters and
     * the default values are "a4" for format and "desktop" for type.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
          /** @description PDF format */
          format: "a4" | "letter" | "legal";
        };
      };
      responses: {
        /** @description The PDF render of an article */
        200: {
          headers: {
            /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
            ETag?: string;
          };
          content: {
            "application/pdf": string;
          };
        };
        /** @description Unknown page title */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description A response is unavailable because service queue is busy or full */
        503: {
          content: {
            "application/json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/page/pdf/{title}/{format}/{type}": {
    /**
     * Get a page as PDF
     * @description Renders the page content as PDF. Format and type are optional parameters and
     * the default values are "a4" for format and "desktop" for type.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
          /** @description PDF format */
          format: "a4" | "letter" | "legal";
          /** @description PDF type - `mobile` (optimized for reading on mobile devices) or `desktop` (regular PDF). `desktop` is the default render mode and it will used if param `type` is not passed */
          type: "mobile" | "desktop";
        };
      };
      responses: {
        /** @description The PDF render of an article */
        200: {
          headers: {
            /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
            ETag?: string;
          };
          content: {
            "application/pdf": string;
          };
        };
        /** @description Unknown page title */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description A response is unavailable because service queue is busy or full */
        503: {
          content: {
            "application/json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/feed/featured/{yyyy}/{mm}/{dd}": {
    /**
     * Aggregated featured content
     * @description Provides the aggregated feed content for the given date. The endpoint returns
     * the featured article of the day, most read articles for the previous day, news
     * content and the featured image and video of the day.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: operations["aggregatedFeed"];
  };
  "/feed/announcements": {
    /**
     * Current announcements to display
     * @description Gets announcements for display in the official Wikipedia iOS and Android apps.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: {
      responses: {
        /** @description Announcements for the given Wiki */
        200: {
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Announcements/0.2.0\"": components["schemas"]["announcementsResponse"];
          };
        };
      };
    };
  };
  "/feed/onthisday/{type}/{mm}/{dd}": {
    /**
     * Events on this day
     * @description Provides events that historically happened on the provided day and month.
     * Supported types of events are:
     *  - All: all of the following
     *  - Selected: a list of a few selected anniversaries which occur on the provided day and month; often the entries are curated for the current year
     *  - Births: a list of birthdays which happened on the provided day and month
     *  - Deaths: a list of deaths which happened on the provided day and month
     *  - Holidays: a list of fixed holidays celebrated on the provided day and month
     *  - Events: a list of significant events which happened on the provided day and month and which are not covered by the other types yet
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: operations["onThisDay"];
  };
  "/transform/html/to/wikitext": {
    /**
     * Transform HTML to Wikitext
     * @description Transform [Parsoid HTML](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec)
     * to Wikitext.
     *
     * When converting pre-existing (possibly modified) content, you should
     * pass in the `title`, `revision`, and `If-Match` header. This lets
     * [Parsoid](https://www.mediawiki.org/wiki/Parsoid) preserve small
     * syntactic variations in wikitext, which ensures that diffs are
     * readable.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s
     */
    post: {
      parameters: {
        header?: {
          /**
           * @description The `ETag` header of the original render indicating it's revision and timeuuid.
           * Required if both `title` and `revision` parameters are present.
           */
          "if-match"?: string;
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The HTML to transform */
            html: string;
            /** @description Normalise the DOM to yield cleaner wikitext? */
            scrub_wikitext?: boolean;
          };
        };
      };
      responses: {
        /** @description MediaWiki Wikitext. */
        200: {
          content: {
            "text/plain; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/wikitext/1.0.0\"": string;
          };
        };
        /** @description Access to the specific revision is restricted */
        403: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Unknown page title or revision */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Revision was restricted */
        409: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Page was deleted */
        410: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/transform/html/to/wikitext/{title}": {
    /**
     * Transform HTML to Wikitext
     * @description Transform [Parsoid HTML](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec)
     * to Wikitext.
     *
     * When converting pre-existing (possibly modified) content, you should
     * pass in the `title`, `revision`, and `If-Match` header. This lets
     * [Parsoid](https://www.mediawiki.org/wiki/Parsoid) preserve small
     * syntactic variations in wikitext, which ensures that diffs are
     * readable.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s
     */
    post: {
      parameters: {
        header?: {
          /**
           * @description The `ETag` header of the original render indicating it's revision and timeuuid.
           * Required if both `title` and `revision` parameters are present.
           */
          "if-match"?: string;
        };
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The HTML to transform */
            html: string;
            /** @description Normalise the DOM to yield cleaner wikitext? */
            scrub_wikitext?: boolean;
          };
        };
      };
      responses: {
        /** @description MediaWiki Wikitext. */
        200: {
          content: {
            "text/plain; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/wikitext/1.0.0\"": string;
          };
        };
        /** @description Access to the specific revision is restricted */
        403: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Unknown page title or revision */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Revision was restricted */
        409: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Page was deleted */
        410: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/transform/html/to/wikitext/{title}/{revision}": {
    /**
     * Transform HTML to Wikitext
     * @description Transform [Parsoid HTML](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec)
     * to Wikitext.
     *
     * When converting pre-existing (possibly modified) content, you should
     * pass in the `title`, `revision`, and `If-Match` header. This lets
     * [Parsoid](https://www.mediawiki.org/wiki/Parsoid) preserve small
     * syntactic variations in wikitext, which ensures that diffs are
     * readable.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s
     */
    post: {
      parameters: {
        header?: {
          /**
           * @description The `ETag` header of the original render indicating it's revision and timeuuid.
           * Required if both `title` and `revision` parameters are present.
           */
          "if-match"?: string;
        };
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
          /** @description The page revision */
          revision: number;
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The HTML to transform */
            html: string;
            /** @description Normalise the DOM to yield cleaner wikitext? */
            scrub_wikitext?: boolean;
          };
        };
      };
      responses: {
        /** @description MediaWiki Wikitext. */
        200: {
          content: {
            "text/plain; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/wikitext/1.0.0\"": string;
          };
        };
        /** @description Access to the specific revision is restricted */
        403: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Unknown page title or revision */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Revision was restricted */
        409: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Page was deleted */
        410: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/transform/wikitext/to/html": {
    /**
     * Transform Wikitext to HTML
     * @description Transform wikitext to HTML. Note that if you set `stash: true`, you
     * also need to supply the title.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s (5 req/s when `stash: true`)
     */
    post: {
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The Wikitext to transform to HTML */
            wikitext: string;
            /** @description Return only `body.innerHTML` */
            body_only?: boolean;
            /** @description Whether to temporarily stash the result of the transformation */
            stash?: boolean;
          };
        };
      };
      responses: {
        /** @description See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec */
        200: {
          content: {
            "text/html; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/HTML/2.1.0\"": string;
          };
        };
        /** @description access to the specific revision is restricted */
        403: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Unknown page title or revision */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Revision was restricted */
        409: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Page was deleted */
        410: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/transform/wikitext/to/html/{title}": {
    /**
     * Transform Wikitext to HTML
     * @description Transform wikitext to HTML. Note that if you set `stash: true`, you
     * also need to supply the title.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s (5 req/s when `stash: true`)
     */
    post: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The Wikitext to transform to HTML */
            wikitext: string;
            /** @description Return only `body.innerHTML` */
            body_only?: boolean;
            /** @description Whether to temporarily stash the result of the transformation */
            stash?: boolean;
          };
        };
      };
      responses: {
        /** @description See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec */
        200: {
          content: {
            "text/html; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/HTML/2.1.0\"": string;
          };
        };
        /** @description access to the specific revision is restricted */
        403: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Unknown page title or revision */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Revision was restricted */
        409: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Page was deleted */
        410: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/transform/wikitext/to/html/{title}/{revision}": {
    /**
     * Transform Wikitext to HTML
     * @description Transform wikitext to HTML. Note that if you set `stash: true`, you
     * also need to supply the title.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s (5 req/s when `stash: true`)
     */
    post: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
          /** @description The page revision */
          revision: number;
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The Wikitext to transform to HTML */
            wikitext: string;
            /** @description Return only `body.innerHTML` */
            body_only?: boolean;
            /** @description Whether to temporarily stash the result of the transformation */
            stash?: boolean;
          };
        };
      };
      responses: {
        /** @description See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec */
        200: {
          content: {
            "text/html; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/HTML/2.1.0\"": string;
          };
        };
        /** @description access to the specific revision is restricted */
        403: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Unknown page title or revision */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Revision was restricted */
        409: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Page was deleted */
        410: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/transform/wikitext/to/lint": {
    /**
     * Check Wikitext for lint errors
     * @description Parse the supplied wikitext and check it for lint errors.
     *
     * - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     * - Rate limit: 25 req/s
     */
    post: {
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The Wikitext to check */
            wikitext: string;
          };
          "application/json": {
            /** @description The Wikitext to check */
            wikitext: string;
          };
        };
      };
      responses: {
        /** @description Linter errors, if any, as a JSON blob */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Unknown page title */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Latest revision was restricted */
        409: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Page was deleted */
        410: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/transform/wikitext/to/lint/{title}": {
    /**
     * Check Wikitext for lint errors
     * @description Parse the supplied wikitext and check it for lint errors.
     *
     * - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     * - Rate limit: 25 req/s
     */
    post: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The Wikitext to check */
            wikitext: string;
          };
        };
      };
      responses: {
        /** @description Linter errors, if any, as a JSON blob */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Unknown page title */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Latest revision was restricted */
        409: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Page was deleted */
        410: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/transform/wikitext/to/lint/{title}/{revision}": {
    /**
     * Check Wikitext for lint errors
     * @description Parse the supplied wikitext and check it for lint errors.
     *
     * - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     * - Rate limit: 25 req/s
     */
    post: {
      parameters: {
        path: {
          /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
          title: string;
          /** @description The page revision */
          revision: number;
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The Wikitext to check */
            wikitext: string;
          };
        };
      };
      responses: {
        /** @description Linter errors, if any, as a JSON blob */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Unknown page title */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Latest revision was restricted */
        409: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Page was deleted */
        410: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/transform/wikitext/to/mobile-html/{title}": {
    /**
     * Transform Wikitext to Mobile HTML
     * @description Transform wikitext to Mobile HTML.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Stable)
     * - Rate limit: 25 req/s (5 req/s when `stash: true`)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    post: operations["transformWikitextToMobileHtml"];
  };
  "/transform/html/from/{from}": {
    /**
     * Machine-translate content
     * @description Fetches the machine translation for the posted content from the source
     * to the language of this wiki.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    post: operations["doMT"];
  };
  "/transform/html/from/{from}/{provider}": {
    /**
     * Machine-translate content
     * @description Fetches the machine translation for the posted content from the source
     * to the language of this wiki.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    post: operations["doMTProvider"];
  };
  "/transform/word/from/{from}/{word}": {
    /**
     * Fetch the dictionary meaning of a word
     * @description Fetches the dictionary meaning of a word from a language and displays
     * it in the target language.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: operations["doDict"];
  };
  "/transform/word/from/{from}/{word}/{provider}": {
    /**
     * Fetch the dictionary meaning of a word
     * @description Fetches the dictionary meaning of a word from a language and displays
     * it in the target language.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: operations["doDictProvider"];
  };
  "/media/math/check/{type}": {
    /**
     * Check and normalize a TeX formula.
     * @description Checks the supplied TeX formula for correctness and returns the
     * normalised formula representation as well as information about
     * identifiers. Available types are tex and inline-tex. The response
     * contains the `x-resource-location` header which can be used to retrieve
     * the render of the checked formula in one of the supported rendering
     * formats. Just append the value of the header to `/media/math/{format}/`
     * and perform a GET request against that URL.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
     */
    post: {
      parameters: {
        path: {
          /** @description The input type of the given formula; can be tex or inline-tex */
          type: "tex" | "inline-tex" | "chem";
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The formula to check */
            q: string;
          };
        };
      };
      responses: {
        /** @description Information about the checked formula */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Invalid type */
        400: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/media/math/formula/{hash}": {
    /**
     * Get a previously-stored formula
     * @description Returns the previously-stored formula via `/media/math/check/{type}` for
     * the given hash.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
     */
    get: {
      parameters: {
        path: {
          /** @description The hash string of the previous POST data */
          hash: string;
        };
      };
      responses: {
        /** @description Information about the checked formula */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Data for the given hash cannot be found */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/media/math/render/{format}/{hash}": {
    /**
     * Get rendered formula in the given format.
     * @description Given a request hash, renders a TeX formula into its mathematic
     * representation in the given format. When a request is issued to the
     * `/media/math/check/{format}` POST endpoint, the response contains the
     * `x-resource-location` header denoting the hash ID of the POST data. Once
     * obtained, this endpoint has to be used to obtain the actual render.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
     */
    get: {
      parameters: {
        path: {
          /** @description The output format; can be svg or mml */
          format: "svg" | "mml" | "png";
          /** @description The hash string of the previous POST data */
          hash: string;
        };
      };
      responses: {
        /** @description The rendered formula */
        200: {
          content: {
            "image/svg+xml": string;
            "application/mathml+xml": string;
          };
        };
        /** @description Unknown format or hash ID */
        404: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/citation/{format}/{query}": {
    /**
     * Get citation data given an article identifier.
     * @description Generates citation data given a URL, DOI, PMID, or PMCID.
     *
     * Automated requests can be made at a rate of 1 request per second (rps).
     *
     * See more at [Citoid service documentation](https://www.mediawiki.org/wiki/Citoid)
     *
     * The citation data can be requested in one of the following formats:
     *   - `mediawiki`: format designed for MediaWiki to be used with `templateData`.
     *     Uses [Zotero field names](https://aurimasv.github.io/z2csl/typeMap.xml).
     *   - `mediawiki-basefields`: `mediawiki` format with Zotero `basefield` field names.
     *   - `zotero`: format used by [Zotero](https://www.zotero.org/).
     *   - `bibtex`: format used in conjunction with LaTeX documents.
     *     See [bibtex.org](http://www.bibtex.org/).
     *   - `wikibase`: format designed for [Wikibase](https://www.mediawiki.org/wiki/Extension:Wikibase_Repository).
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: operations["getCitation"];
  };
  "/data/lists/setup": {
    /**
     * Opt in to use reading lists.
     * @description Must precede other list operations.
     *
     * Request must be authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    post: {
      parameters: {
        query: {
          /** @description The CRSF edit token provided by the MediaWiki API */
          csrf_token: string;
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "application/json; charset=utf-8": Record<string, never>;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/lists/teardown": {
    /**
     * Opt out from using reading lists.
     * @description Deletes all data. User needs to opt in again before being able to do anything.
     *
     * Request must be authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    post: {
      parameters: {
        query: {
          /** @description The CRSF edit token provided by the MediaWiki API */
          csrf_token: string;
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "application/json; charset=utf-8": Record<string, never>;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/lists/": {
    /**
     * Get all lists of the current user.
     * @description Returns metadata describing the lists of the current user. Might be truncated and include
     * a continuation token.
     *
     * Request must be authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: {
      parameters: {
        query?: {
          /** @description Continuation parameter from previous request */
          next?: string;
          /**
           * @description Sort order
           * - `name`: by name, ascending;
           * - `updated`: by last modification date, descending.
           */
          sort?: "name" | "updated";
        };
      };
      responses: {
        /** @description An array of list metadata. */
        200: {
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Lists/0.1\"": {
              lists?: components["schemas"]["list_read"][];
              /** @description Continuation token. */
              next?: string;
              /**
               * Format: date-time
               * @description Timestamp to sync from, to be used with the `GET /lists/changes/since/{date}`
               * endpoint.
               */
              "continue-from"?: string;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
    /**
     * Create a new list for the current user.
     * @description Creates a new empty list. On name conflict, does nothing and returns the data of an
     * existing list.
     *
     * Request must be authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * This endpoint is deprecated and might be removed without warning. Use the batch version
     * instead.
     */
    post: {
      parameters: {
        query: {
          /** @description The CRSF edit token provided by the MediaWiki API */
          csrf_token: string;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["list_write"];
        };
      };
      responses: {
        /** @description The data for the new list. */
        200: {
          content: {
            "application/json; charset=utf-8": {
              /**
               * @description List ID.
               *
               * Deprecated, will be removed. Use the full list object.
               *
               * @example 7
               */
              id: number;
              list: components["schemas"]["list_read"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/lists/{id}": {
    /**
     * Update a list.
     * @description List must belong to current user and request must be authenticated with
     * a MediaWiki session cookie. If the name is changed, the new name must not be in use.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    put: {
      parameters: {
        query: {
          /** @description The CRSF edit token provided by the MediaWiki API */
          csrf_token: string;
        };
        path: {
          id: number;
        };
      };
      requestBody?: {
        content: {
          "*/*": components["schemas"]["list_write"];
        };
      };
      responses: {
        /** @description The updated data for the list. */
        200: {
          content: {
            "application/json; charset=utf-8": {
              /**
               * @description List ID.
               *
               * Deprecated, will be removed. Use the full list object.
               *
               * @example 7
               */
              id: number;
              list: components["schemas"]["list_read"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
    /**
     * Delete a list.
     * @description List must belong to current user and request must be authenticated with
     * a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "application/json; charset=utf-8": Record<string, never>;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/lists/batch": {
    /**
     * Create multiple new lists for the current user.
     * @description See `POST /lists/`.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    post: {
      parameters: {
        query: {
          /** @description The CRSF edit token provided by the MediaWiki API */
          csrf_token: string;
        };
      };
      requestBody: {
        content: {
          "*/*": {
            batch: components["schemas"]["list_write"][];
          };
        };
      };
      responses: {
        /** @description The data for the new lists (in the same order as the inputs). */
        200: {
          content: {
            "application/json; charset=utf-8": {
              /** @description Deprecated, will be removed. Use the full list objects instead. */
              batch: {
                  /**
                   * @description List ID
                   * @example 7
                   */
                  id: number;
                }[];
              lists: components["schemas"]["list_read"][];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/lists/{id}/entries/": {
    /**
     * Get all entries of a given list.
     * @description Returns pages contained by the given list. Might be truncated and include
     * a continuation token.
     *
     * List must belong to current user and request must be authenticated with
     * a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: operations["getListEntries"];
    /**
     * Create a new list entry.
     * @description Creates a new list entry in the given list. On conflict, does nothing and returns the
     * data of an existing list.
     *
     * The list must belong to the current user and the request must be
     * authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * This endpoint is deprecated and might be removed without warning. Use the batch version
     * instead.
     */
    post: {
      parameters: {
        query: {
          /** @description The CRSF edit token provided by the MediaWiki API */
          csrf_token: string;
        };
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "*/*": components["schemas"]["list_entry_write"];
        };
      };
      responses: {
        /** @description The data for the new list entry. */
        200: {
          content: {
            "application/json; charset=utf-8": {
              /**
               * @description List entry ID
               *
               * Deprecated, will be removed. Use the full entry object instead.
               *
               * @example 13
               */
              id: number;
              entry: components["schemas"]["list_entry_read"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/lists/{id}/entries/{entry_id}": {
    /**
     * Delete a list entry.
     * @description Deletes a given list entry.
     *
     * The list must belong to the current user and the request must be
     * authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    delete: {
      parameters: {
        path: {
          id: number;
          entry_id: number;
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "application/json; charset=utf-8": Record<string, never>;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/lists/{id}/entries/batch": {
    /**
     * Create multiple new list entries.
     * @description See `POST /lists/{id}/entries/`.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    post: {
      parameters: {
        query: {
          /** @description The CRSF edit token provided by the MediaWiki API */
          csrf_token: string;
        };
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "*/*": {
            /** list_entries */
            batch: components["schemas"]["list_entry_write"][];
          };
        };
      };
      responses: {
        /** @description The data for the new list entries (in the same order as the inputs). */
        200: {
          content: {
            "application/json; charset=utf-8": {
              batch: {
                  /**
                   * @description List entry ID
                   * @example 13
                   */
                  id?: number;
                }[];
              entries: components["schemas"]["list_entry_read"][];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/lists/pages/{project}/{title}": {
    /**
     * Get lists of the current user which contain a given page.
     * @description Request must be authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: {
      parameters: {
        query?: {
          /** @description Continuation parameter from previous request */
          next?: string;
        };
        path: {
          project: string;
          title: string;
        };
      };
      responses: {
        /** @description An array of list metadata. */
        200: {
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Lists/0.1\"": {
              lists?: components["schemas"]["list_read"][];
              /** @description Continuation token. */
              next?: string;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/lists/changes/since/{date}": {
    /**
     * Get recent changes to the lists
     * @description Returns metadata describing lists and entries which have changed. Might be truncated
     * and include a continuation token.
     *
     * Request must be authenticated with a MediaWiki session cookie.
     *
     * For safe synchronization, the date parameter should be taken from the `continue-from`
     * field of a previous `GET /lists/` or `GET /lists/changes/since/{date}` request. This will
     * ensure that no changes are skipped, at the cost of sometimes receiving the same change
     * multitple times. Clients should handle changes in an idempotent way.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: {
      parameters: {
        query?: {
          /** @description Continuation parameter from previous request */
          next?: string;
        };
        path: {
          /**
           * @description Cutoff date (in ISO 8601). To ensure reliable synchronization, the API
           * might return changes which are slightly older than the cutoff date.
           */
          date: string;
        };
      };
      responses: {
        /** @description An array of list and entry metadata. */
        200: {
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Lists/0.1\"": {
              lists?: components["schemas"]["list_read"][];
              /** @description Continuation token. */
              next?: string;
              /**
               * Format: date-time
               * @description Timestamp to sync from, to be used with the `GET /lists/changes/since/{date}`
               * endpoint.
               */
              "continue-from"?: string;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/recommendation/article/creation/translation/{from_lang}": {
    /**
     * Recommend articles for translation.
     * @description Recommends articles to be translated from the source
     * to the domain language.
     *
     * See more at [Recommendation API documentation](https://meta.wikimedia.org/wiki/Recommendation_API)
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: {
      parameters: {
        query?: {
          /** @description The max number of articles to return */
          count?: number;
        };
        path: {
          /** @description The source language code */
          from_lang: string;
        };
      };
      responses: {
        /** @description the list of articles recommended for translation */
        200: {
          content: {
            "application/json": components["schemas"]["recommendation_result"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/recommendation/article/creation/translation/{from_lang}/{seed_article}": {
    /**
     * Recommend articles for translation.
     * @description Recommends articles to be translated from the source
     * to the domain language.
     *
     * See more at [Recommendation API documentation](https://meta.wikimedia.org/wiki/Recommendation_API)
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: {
      parameters: {
        query?: {
          /** @description The max number of articles to return */
          count?: number;
        };
        path: {
          /** @description The source language code */
          from_lang: string;
          /** @description The article to use as a search seed */
          seed_article: string;
        };
      };
      responses: {
        /** @description the list of articles recommended for translation */
        200: {
          content: {
            "application/json": components["schemas"]["recommendation_result"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/recommendation/article/creation/morelike/{seed_article}": {
    /**
     * Recommend missing articles
     * @description Recommends articles similar to the seed article but are missing
     * from the domain language Wikipedia.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     */
    get: {
      parameters: {
        path: {
          /** @description The article title used to search similar but missing articles */
          seed_article: string;
        };
      };
      responses: {
        /** @description the prioritized list of Wikidata IDs recommended for creation as Wikipedia articles */
        200: {
          content: {
            "application/json": components["schemas"]["morelike_result"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/css/mobile/{type}": {
    /**
     * Get CSS for mobile apps.
     * @description Gets common CSS mobile apps need to properly display pages using Page Content Service.
     * In most cases all of the types are needed (preferably in this order):
     * * base (Common mobile CSS from ResourceLoader)
     * * site (Site-specific, mobile CSS from ResourceLoader, as defined in MediaWiki\:Mobile.css)
     * * pcs (CSS for the Page Content Service)
     *
     * The `base` and `pcs` responses are the same regardless of what domain is used.
     * For these we suggest meta.wikimedia.org.
     *
     * You can still pass pagelib for type, but this is a legacy version of the CSS for
     * existing app clients.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Unstable)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    get: {
      parameters: {
        path: {
          /** @description The desired CSS bundle */
          type: "base" | "pagelib" | "pcs" | "site";
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            /** @description Different values indicate that the content has changed */
            ETag?: string;
          };
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/CSS/1.0.0\"": Record<string, never>;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/javascript/mobile/{type}": {
    /**
     * Get JavaScript for mobileapps
     * @description Gets the JavaScript bundle so that clients can have
     * convenient access to that for consuming the page HTML.
     * Amongst other things,
     * * it allows to detect the platform and through that enable platform specific CSS rules,
     * * has code to lazy load images on the page,
     * * code for collapsing and expanding tables.
     *
     * Valid types are pagelib or pcs. Passing pcs will return the JavaScript for the
     * Page Content Service. Passing pagelib will return a deprecated legacy version
     * of the wikimedia-page-library JavaScript to support existing app clients.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Unstable)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     */
    get: {
      parameters: {
        path: {
          /** @description The desired JavaScript bundle */
          type: "pagelib" | "pcs";
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            /** @description Different values indicate that the content has changed */
            ETag?: string;
          };
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/JavaScript/1.0.0\"": Record<string, never>;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
  "/data/i18n/{type}": {
    /**
     * Get internationalization info
     * @description Gets internationalization information for the given site. Currently the only
     * supported type is pcs for the Page Content Service.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     */
    get: {
      parameters: {
        path: {
          /** @description The desired internationalization bundle */
          type: "pcs";
        };
      };
      responses: {
        /** @description Success */
        200: {
          headers: {
            /** @description Different values indicate that the content has changed */
            ETag?: string;
          };
          content: {
            "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/i18n/0.0.1\"": Record<string, never>;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/problem+json": components["schemas"]["problem"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description The result format for revision listing */
    revisions: {
      items: components["schemas"]["revisionIdentifier"];
    };
    /** @description The result format for listings */
    listing: {
      items: string[];
      _links?: {
        next?: {
          /** @description Relative link to next result page. */
          href?: string;
        };
      };
    };
    /** @description Result format for Parsoid data queries */
    "data-parsoid": {
      /** Format: int32 */
      counter: number;
      ids: Record<string, never>;
    };
    /** @description Result format for revision items */
    revision: {
      /** Format: int32 */
      count: number;
      items: components["schemas"]["revisionInfo"];
    };
    /** @description Complete information about the revision */
    revisionInfo: {
      title?: string;
      /** Format: int32 */
      page_id?: number;
      /** Format: int32 */
      rev?: number;
      tid?: string;
      comment?: string;
      restrictions?: string[];
      tags?: string[];
      /** Format: int32 */
      user_id?: number;
      user_text?: string;
      /** Format: date-time */
      timestamp?: string;
      redirect?: boolean;
      page_language?: string;
    };
    /** @description Unique revision identifier */
    revisionIdentifier: {
      /** Format: int32 */
      revision?: number;
      tid?: string;
    };
    /** @description a good example of the differences can be seen in https://en.wikipedia.org/api/rest_v1/page/summary/IOS_13 */
    titles_set: {
      /** @description the DB key (non-prefixed), e.g. may have _ instead of spaces, best for making request URIs, still requires Percent-encoding */
      canonical: string;
      /** @description the normalized title (https://www.mediawiki.org/wiki/API:Query#Example_2:_Title_normalization), e.g. may have spaces instead of _ */
      normalized: string;
      /** @description the title as it should be displayed to the user */
      display: string;
    };
    media_list: {
      /** @description the revision ID used to create the list */
      revision: string;
      /** @description the time uuid of the page rendering used to create the list */
      tid: string;
      /** @description a list of media items */
      items: components["schemas"]["media_item"][];
    };
    media_item: {
      /** @description The file page title */
      title?: string;
      /** @enum {string} */
      type: "image" | "video" | "audio";
      /** @description section ID in which the item is found on the page */
      section_id: number;
      /** @description whether the client should show the file in an image gallery presentation */
      showInGallery: boolean;
      caption?: {
        /** @description on-wiki caption for the media item, including all HTML markup */
        html?: string;
        /** @description plain text of the on-wiki caption for the media item */
        text?: string;
      };
      /** @description reference to a Mathoid-rendered math formula image */
      original?: {
        /** @description Mathoid image render URL */
        source?: string;
        /** @description the Mathoid image mime type */
        mime?: string;
      };
    };
    related: {
      pages?: components["schemas"]["summary"][];
    };
    problem: {
      type: string;
      title?: string;
      detail?: string;
      instance?: string;
    };
    originalimage: {
      /** @description Original image URI */
      source: string;
      /** @description Original image width */
      width: number;
      /** @description Original image height */
      height: number;
    };
    thumbnail: {
      /** @description Thumbnail image URI */
      source: string;
      /** @description Thumbnail width */
      width: number;
      /** @description Thumnail height */
      height: number;
    };
    summary: {
      titles: components["schemas"]["titles_set"];
      /**
       * @deprecated
       * @description The page title.
       * Deprecated: Use `titles.normalized` instead.
       */
      title?: string;
      /**
       * @deprecated
       * @description The page title how it should be shown to the user.
       * Deprecated: Use `titles.display` instead.
       */
      displaytitle?: string;
      /** @description The page ID */
      pageid?: number;
      /** @description First several sentences of an article in plain text */
      extract: string;
      /** @description First several sentences of an article in simple HTML format */
      extract_html?: string;
      thumbnail?: components["schemas"]["thumbnail"];
      originalimage?: components["schemas"]["originalimage"];
      /**
       * @description The page language code
       * @example en
       */
      lang: string;
      /**
       * @description The page language direction code
       * @example ltr
       */
      dir: string;
      /**
       * @description The time when the page was last edited in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
       * @example {}
       */
      timestamp?: string;
      /**
       * @description Wikidata description for the page
       * @example American poet
       */
      description?: string;
      /** @description The coordinates of the item */
      coordinates?: {
        /** @description The latitude */
        lat: number;
        /** @description The longitude */
        lon: number;
      };
    };
    cx_mt: {
      /** @description the translated content */
      contents?: string;
    };
    cx_dict: {
      /** @description the original word to look up */
      source?: string;
      /** @description the translations found */
      translations?: {
          /** @description the translated phrase */
          phrase?: string;
          /** @description extra information about the phrase */
          info?: string;
          /** @description the source dictionary used for the translation */
          sources?: string;
        }[];
    };
    mostread_article: {
      /** @description Article title in a form of DB key */
      title: string;
      /** @description Article title as it should be presented to the user */
      normalizedtitle: string;
      /** @description Number of views on the requested day */
      views: number;
      /** @description Position in the list of most viewed articles */
      rank: number;
      thumbnail?: components["schemas"]["thumbnail"];
      /** @description Wikidata description of the article */
      description?: string;
      /** @description First several sentences of an article in plain text */
      extract?: string;
    };
    mostread: {
      /** @description The date which the data correspond to */
      date: string;
      /** @description Array of most popular articles */
      articles: components["schemas"]["mostread_article"][];
    };
    news_item: {
      /** @description A cover story for the news item */
      story: string;
      /** @description A collection of articles related to the news item */
      links: components["schemas"]["summary"][];
    };
    news: components["schemas"]["news_item"][];
    image_description: {
      /** @description Text of the description */
      text: string;
      /** @description Language code of the description */
      lang: string;
    };
    image: {
      /** @description Image title */
      title: string;
      thumbnail: components["schemas"]["thumbnail"];
      image: components["schemas"]["thumbnail"];
      description?: components["schemas"]["image_description"];
    };
    onthisday: {
        /** @description Short description of the event */
        text?: string;
        /** @description List of pages related to the event */
        pages?: components["schemas"]["summary"][];
      }[];
    /** @description Aggregated feed content for a given date */
    feed: {
      tfa?: components["schemas"]["summary"];
      mostread?: components["schemas"]["mostread"];
      news?: components["schemas"]["news"];
      image?: components["schemas"]["image"];
      onthisday?: components["schemas"]["onthisday"];
    };
    action: {
      /** @description The title to display on the button that performs the action */
      title: string;
      /** @description The URL to navigate to when the button is pressed */
      url: string;
    };
    announcement: {
      /** @description Unique ID of the announcement */
      id: string;
      /** @description The type of announcement. Possible values are "survey" or "fundraising" */
      type: string;
      /** @description The date to begin showing the announcement */
      start_time: string;
      /** @description The date to stop showing the announcement */
      end_time: string;
      /** @description An array of platforms to display the announcement. Possible values are "iOSApp" or "AndroidApp" */
      platforms: string[];
      /** @description The text of the announcement */
      text: string;
      /** @description The URL of the image for the announcement */
      image?: string;
      action?: components["schemas"]["action"];
      /** @description HTML to display below the announcement. Usually a privacy statment and link to a policy */
      caption_HTML?: string;
      /**
       * @description An array of country codes in which to display the announcement.
       * Clients should derive the country from 'GeoIP' portion of the Set-Cookie header
       */
      countries: string[];
    };
    announcementsResponse: {
      announce: components["schemas"]["announcement"][];
    };
    /** @description Lists of events which happened on the provided day and month */
    onthisdayResponse: {
      births?: components["schemas"]["onthisday"];
      deaths?: components["schemas"]["onthisday"];
      events?: components["schemas"]["onthisday"];
      holidays?: components["schemas"]["onthisday"];
      selected?: components["schemas"]["onthisday"];
    };
    result: {
      itemType: string;
      title: string;
      url: string;
    };
    /** list */
    list_read: {
      /** @example 42 */
      id: number;
      /** @example Planets */
      name: string;
      /** @example Planets of the Solar System */
      description?: string;
      /**
       * Format: date-time
       * @description Creation date (in ISO 8601)
       */
      created: string;
      /**
       * Format: date-time
       * @description Last modification date (in ISO 8601)
       */
      updated: string;
    };
    /** list */
    list_write: {
      /** @example Planets */
      name: string;
      /** @example Planets of the Solar System */
      description?: string;
    };
    /** list_entry */
    list_entry_read: {
      /** @example 64 */
      id?: number;
      /**
       * @description Domain of the wiki containing the page.
       * @example https://en.wikipedia.org
       */
      project?: string;
      /**
       * @description Title of the page containing the page, in database format.
       * @example Barack_Obama
       */
      title?: string;
      /**
       * Format: date-time
       * @description Creation date (in ISO 8601)
       */
      created?: string;
      /**
       * Format: date-time
       * @description Last modification date (in ISO 8601)
       */
      updated?: string;
    };
    list_entry_write: {
      /**
       * @description Domain of the wiki containing the page.
       * @example https://en.wikipedia.org
       */
      project: string;
      /**
       * @description Title of the page containing the page, in database format.
       * @example Barack_Obama
       */
      title: string;
    };
    recommendation_result: {
      /** @description the number of recommendations returned */
      count?: number;
      /** @description the list of articles recommended for translation */
      items?: {
          /** @description wikidata id for the item */
          wikidata_id?: string;
          /** @description title of the article in the source language */
          title?: string;
          /** @description count of sites the wikidata item is linked to */
          sitelink_count?: number;
        }[];
    };
    /** @description the prioritized list of Wikidata IDs recommended for creation as Wikipedia articles */
    morelike_result: {
        /** @description Wikidata ID for the item */
        wikidata_id?: string;
        /** @description Score of the recommendation. The higher the score, the more important the recommendation is. */
        score?: number;
        /** @description Source of the recommendation -- which wiki is recommending the current article. */
        source_language?: string;
      }[];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get HTML for a specific title/revision & optionally timeuuid.
   * @description Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
   */
  getFormatRevision: {
    parameters: {
      query?: {
        /**
         * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
         * To get a 200 response instead, supply `false` to the `redirect` parameter.
         */
        redirect?: boolean;
        /**
         * @description Whether to temporary stash data-parsoid in order to support transforming the
         * modified content later. If this parameter is set, requests are rate-limited on
         * a per-client basis (max 5 requests per second per client)
         */
        stash?: boolean;
      };
      header?: {
        /** @description The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language. */
        "Accept-Language"?: string;
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
        /** @description The revision */
        revision: number;
      };
    };
    responses: {
      /**
       * @description The html for the given page, revision and tid.
       *
       * See [the MediaWiki DOM
       * spec](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec) for a
       * description of the MediaWiki-specific semantic markup in this HTML.
       * Note that additional metadata is available in the HTML head.
       *
       * This HTML can be edited using arbitrary HTML tools. The modified HTML
       * can be converted back to wikitext using the
       * [/transform/html/to/wikitext{/title}{/revision}](#!/Transforms/transform_html_to_wikitext__title___revision__post)
       * entry point.
       */
      200: {
        headers: {
          /**
           * @description ETag header indicating the revision and render timeuuid
           * separated by a slash:
           * "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc"
           * This ETag can be passed to the HTML save end point (as
           * `base_etag` POST parameter), and can also be used to retrieve
           * the exact corresponding data-parsoid metadata, by requesting
           * the specific `revision` and `tid` indicated by the `ETag`.
           */
          ETag?: string;
        };
        content: {
          "text/html; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/HTML/2.1.0\"": string;
          "application/json": Record<string, never>;
        };
      };
      /**
       * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
       * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
       * title normalization client-side.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      301: {
        content: never;
      };
      /**
       * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
       * The `location` header points to the redirect target, and the body contains the actual page revision contents as HTML.
       * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      302: {
        content: never;
      };
      /** @description Invalid revision or tid */
      400: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Access to the specific revision is restricted */
      403: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Unknown page, revision or tid */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get mobile-optimized HTML sections for a title.
   * @description Retrieve the latest HTML for a page title optimised for viewing with
   * native mobile applications. Note that the output is split by sections.
   *
   * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
   *
   * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
   * more information about the endpoint deprecation.
   *
   * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
   */
  getSections: {
    parameters: {
      query?: {
        /**
         * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
         * To get a 200 response instead, supply `false` to the `redirect` parameter.
         */
        redirect?: boolean;
      };
      header?: {
        /** @description The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language. */
        "Accept-Language"?: string;
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
      };
    };
    responses: {
      /** @description JSON containing HTML sections and metadata for the given page title. */
      200: {
        headers: {
          /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
          ETag?: string;
        };
        content: {
          "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/mobile-sections/0.14.1\"": Record<string, never>;
        };
      };
      /**
       * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
       * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
       * title normalization client-side.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      301: {
        content: never;
      };
      /**
       * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
       * The `location` header points to the redirect target.
       * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      302: {
        content: never;
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get mobile-optimized HTML sections for a title.
   * @description Retrieve the latest HTML for a page title optimised for viewing with
   * native mobile applications. Note that the output is split by sections.
   *
   * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
   *
   * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
   * more information about the endpoint deprecation.
   *
   * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
   */
  getSectionsWithRevision: {
    parameters: {
      query?: {
        /**
         * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
         * To get a 200 response instead, supply `false` to the `redirect` parameter.
         */
        redirect?: boolean;
      };
      header?: {
        /** @description The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language. */
        "Accept-Language"?: string;
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
        /** @description Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher. */
        revision: number;
      };
    };
    responses: {
      /** @description JSON containing HTML sections and metadata for the given page title. */
      200: {
        headers: {
          /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
          ETag?: string;
        };
        content: {
          "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/mobile-sections/0.14.1\"": Record<string, never>;
        };
      };
      /**
       * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
       * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
       * title normalization client-side.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      301: {
        content: never;
      };
      /**
       * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
       * The `location` header points to the redirect target.
       * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      302: {
        content: never;
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get mobile-optimized HTML lead section and metadata for a title.
   * @description Retrieve the lead section of the latest HTML for a page title optimised
   * for viewing with native mobile applications.
   *
   * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
   *
   * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
   * more information about the endpoint deprecation.
   *
   * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
   */
  getSectionsLead: {
    parameters: {
      query?: {
        /**
         * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
         * To get a 200 response instead, supply `false` to the `redirect` parameter.
         */
        redirect?: boolean;
      };
      header?: {
        /** @description The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language. */
        "Accept-Language"?: string;
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
      };
    };
    responses: {
      /** @description The HTML for the given page title. */
      200: {
        headers: {
          /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
          ETag?: string;
        };
        content: {
          "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/mobile-sections/0.14.1\"": Record<string, never>;
        };
      };
      /**
       * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
       * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
       * title normalization client-side.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      301: {
        content: never;
      };
      /**
       * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
       * The `location` header points to the redirect target.
       * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      302: {
        content: never;
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get mobile-optimized HTML lead section and metadata for a title.
   * @description Retrieve the lead section of the latest HTML for a page title optimised
   * for viewing with native mobile applications.
   *
   * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
   *
   * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
   * more information about the endpoint deprecation.
   *
   * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
   */
  getSectionsLeadWithRevision: {
    parameters: {
      query?: {
        /**
         * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
         * To get a 200 response instead, supply `false` to the `redirect` parameter.
         */
        redirect?: boolean;
      };
      header?: {
        /** @description The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language. */
        "Accept-Language"?: string;
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
        /** @description Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher. */
        revision: number;
      };
    };
    responses: {
      /** @description The HTML for the given page title. */
      200: {
        headers: {
          /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
          ETag?: string;
        };
        content: {
          "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/mobile-sections/0.14.1\"": Record<string, never>;
        };
      };
      /**
       * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
       * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
       * title normalization client-side.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      301: {
        content: never;
      };
      /**
       * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
       * The `location` header points to the redirect target.
       * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      302: {
        content: never;
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get non-lead mobile-optimized HTML sections for a title.
   * @description Retrieve the remainder of the latest HTML (without the lead section) for
   * a page title optimised for viewing with native mobile applications,
   * provided as a JSON object containing the sections.
   *
   * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
   *
   * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
   * more information about the endpoint deprecation.
   *
   * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
   */
  getSectionsRemaining: {
    parameters: {
      query?: {
        /**
         * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
         * To get a 200 response instead, supply `false` to the `redirect` parameter.
         */
        redirect?: boolean;
      };
      header?: {
        /** @description The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language. */
        "Accept-Language"?: string;
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
      };
    };
    responses: {
      /** @description JSON wrapping HTML sections for the given page title. */
      200: {
        headers: {
          /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
          ETag?: string;
        };
        content: {
          "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/mobile-sections/0.14.1\"": Record<string, never>;
        };
      };
      /**
       * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
       * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
       * title normalization client-side.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      301: {
        content: never;
      };
      /**
       * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
       * The `location` header points to the redirect target.
       * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      302: {
        content: never;
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get non-lead mobile-optimized HTML sections for a title.
   * @description Retrieve the remainder of the latest HTML (without the lead section) for
   * a page title optimised for viewing with native mobile applications,
   * provided as a JSON object containing the sections.
   *
   * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
   *
   * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
   * more information about the endpoint deprecation.
   *
   * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
   */
  getSectionsRemainingWithRevision: {
    parameters: {
      query?: {
        /**
         * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
         * To get a 200 response instead, supply `false` to the `redirect` parameter.
         */
        redirect?: boolean;
      };
      header?: {
        /** @description The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language. */
        "Accept-Language"?: string;
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
        /** @description Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher. */
        revision: number;
      };
    };
    responses: {
      /** @description JSON wrapping HTML sections for the given page title. */
      200: {
        headers: {
          /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
          ETag?: string;
        };
        content: {
          "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/mobile-sections/0.14.1\"": Record<string, never>;
        };
      };
      /**
       * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
       * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
       * title normalization client-side.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      301: {
        content: never;
      };
      /**
       * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
       * The `location` header points to the redirect target.
       * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      302: {
        content: never;
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get list of media files used on a page.
   * @description Gets the list of media items (images, audio, and video) in the order in which they appear on a
   * given wiki page.
   *
   * Stability: [unstable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Unstable)
   *
   * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
   */
  "getContent-media-list": {
    parameters: {
      query?: {
        /**
         * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
         * To get a 200 response instead, supply `false` to the `redirect` parameter.
         */
        redirect?: boolean;
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
      };
    };
    responses: {
      /** @description JSON containing metadata of media items appearing on the given page. */
      200: {
        headers: {
          /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
          ETag?: string;
        };
        content: {
          "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Media/1.3.1\"": components["schemas"]["media_list"];
        };
      };
      /**
       * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
       * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
       * title normalization client-side.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      301: {
        content: never;
      };
      /**
       * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
       * The `location` header points to the redirect target.
       * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      302: {
        content: never;
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get list of media files used on a page.
   * @description Gets the list of media items (images, audio, and video) in the order in which they appear on a
   * given wiki page.
   *
   * Stability: [unstable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Unstable)
   *
   * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
   */
  "getContentWithRevision-media-list": {
    parameters: {
      query?: {
        /**
         * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
         * To get a 200 response instead, supply `false` to the `redirect` parameter.
         */
        redirect?: boolean;
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
        /** @description Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher. */
        revision: number;
      };
    };
    responses: {
      /** @description JSON containing metadata of media items appearing on the given page. */
      200: {
        headers: {
          /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
          ETag?: string;
        };
        content: {
          "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Media/1.3.1\"": components["schemas"]["media_list"];
        };
      };
      /**
       * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
       * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
       * title normalization client-side.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      301: {
        content: never;
      };
      /**
       * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
       * The `location` header points to the redirect target.
       * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      302: {
        content: never;
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get page content HTML optimized for mobile consumption.
   * @description Gets the content HTML optimized for mobile consumption for the given page. This content
   * is derived from Parsoid HTML (see `/page/html/{title}` endpoint).
   * The difference to Parsoid HTML is roughly:
   * * Some elements and attributes not needed for the reading case are removed.
   * * LeadIntroductionTransform: The introductory paragraph is moved before an infobox.
   * * RedLinks: Red links are flattened (=turned into span elements).
   * * WidenImage: images that should be displayed in gallery are widened.
   * * Section headings are slightly changed by wrapping the headings inside a div and adding
   *   a span element inside the new div for the edit buttons.
   * * Additional classes are added to img elements to fix issues with non-white backgrounds.
   *   See Theme support below for instructions on how to enable that.
   * * Pagelib CSS files needed to display the content are referenced.
   * * LazyLoadTransform: server-side portion/prep for lazy loading of images.
   * * CollapseTable: server-side portion/prep for collapsing tables.
   *
   * What's not included? What parts of the PageLibrary does a client still have to do?
   * * Theme support: Themes can be turned on by adding a theme class to the root <html> tag.
   *   Possible class names are:
   *   * `pagelib_theme_default`
   *   * `pagelib_theme_dark`
   *   * `pagelib_theme_black`
   *   * `pagelib_theme_sepia`
   *
   *   The pagelib JS has functionality to do that: ThemeTransform.setTheme(document, theme).
   * * Dim images: DimImagesTransform.dim(window, enable)
   * * PlatformTransform.classify(window) to trigger Android and iOS app specific CSS rules
   * * LazyLoadTransformer: client side companion of LazyLoadTransform (note the extra *er*
   * here)
   * * FooterTransformer: seems to be more UI than content, requires I18N, too
   *
   * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
   */
  "getContent-mobile-html": {
    parameters: {
      query?: {
        /**
         * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
         * To get a 200 response instead, supply `false` to the `redirect` parameter.
         */
        redirect?: boolean;
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
      };
    };
    responses: {
      /** @description mobile-optimized HTML of the given page. */
      200: {
        headers: {
          /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
          ETag?: string;
        };
        content: {
          "text/html; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Mobile-HTML/1.2.2\"": string;
        };
      };
      /**
       * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
       * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
       * title normalization client-side.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      301: {
        content: never;
      };
      /**
       * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
       * The `location` header points to the redirect target.
       * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      302: {
        content: never;
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get page content HTML optimized for mobile consumption.
   * @description Gets the content HTML optimized for mobile consumption for the given page. This content
   * is derived from Parsoid HTML (see `/page/html/{title}` endpoint).
   * The difference to Parsoid HTML is roughly:
   * * Some elements and attributes not needed for the reading case are removed.
   * * LeadIntroductionTransform: The introductory paragraph is moved before an infobox.
   * * RedLinks: Red links are flattened (=turned into span elements).
   * * WidenImage: images that should be displayed in gallery are widened.
   * * Section headings are slightly changed by wrapping the headings inside a div and adding
   *   a span element inside the new div for the edit buttons.
   * * Additional classes are added to img elements to fix issues with non-white backgrounds.
   *   See Theme support below for instructions on how to enable that.
   * * Pagelib CSS files needed to display the content are referenced.
   * * LazyLoadTransform: server-side portion/prep for lazy loading of images.
   * * CollapseTable: server-side portion/prep for collapsing tables.
   *
   * What's not included? What parts of the PageLibrary does a client still have to do?
   * * Theme support: Themes can be turned on by adding a theme class to the root <html> tag.
   *   Possible class names are:
   *   * `pagelib_theme_default`
   *   * `pagelib_theme_dark`
   *   * `pagelib_theme_black`
   *   * `pagelib_theme_sepia`
   *
   *   The pagelib JS has functionality to do that: ThemeTransform.setTheme(document, theme).
   * * Dim images: DimImagesTransform.dim(window, enable)
   * * PlatformTransform.classify(window) to trigger Android and iOS app specific CSS rules
   * * LazyLoadTransformer: client side companion of LazyLoadTransform (note the extra *er*
   * here)
   * * FooterTransformer: seems to be more UI than content, requires I18N, too
   *
   * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
   */
  "getContentWithRevision-mobile-html": {
    parameters: {
      query?: {
        /**
         * @description Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
         * To get a 200 response instead, supply `false` to the `redirect` parameter.
         */
        redirect?: boolean;
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
        /** @description Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher. */
        revision: number;
      };
    };
    responses: {
      /** @description mobile-optimized HTML of the given page. */
      200: {
        headers: {
          /** @description Syntax: "{revision}/{tid}". Example: "701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc" */
          ETag?: string;
        };
        content: {
          "text/html; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Mobile-HTML/1.2.2\"": string;
        };
      };
      /**
       * @description A permanent redirect is returned if the supplied article title was not in the normalized form.
       * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
       * title normalization client-side.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      301: {
        content: never;
      };
      /**
       * @description The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
       * The `location` header points to the redirect target.
       * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
       *
       * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
       * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
       */
      302: {
        content: never;
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get pages related to the given title
   * @description Returns summaries for 20 pages related to the given page. Summaries include
   * page title, namespace and id along with short text description of the page
   * and a thumbnail.
   *
   * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
   */
  getRelatedPages: {
    parameters: {
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
      };
    };
    responses: {
      /** @description The related pages */
      200: {
        content: {
          "application/json": components["schemas"]["related"];
        };
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Aggregated featured content
   * @description Provides the aggregated feed content for the given date. The endpoint returns
   * the featured article of the day, most read articles for the previous day, news
   * content and the featured image and video of the day.
   *
   * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
   */
  aggregatedFeed: {
    parameters: {
      path: {
        /** @description Year the aggregated content is requested for */
        yyyy: string;
        /** @description Month the aggregated content is requested for, 0-padded */
        mm: string;
        /** @description Day of the month the aggregated content is requested for, 0-padded */
        dd: string;
      };
    };
    responses: {
      /** @description JSON containing all of the featured content */
      200: {
        content: {
          "application/json": components["schemas"]["feed"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Events on this day
   * @description Provides events that historically happened on the provided day and month.
   * Supported types of events are:
   *  - All: all of the following
   *  - Selected: a list of a few selected anniversaries which occur on the provided day and month; often the entries are curated for the current year
   *  - Births: a list of birthdays which happened on the provided day and month
   *  - Deaths: a list of deaths which happened on the provided day and month
   *  - Holidays: a list of fixed holidays celebrated on the provided day and month
   *  - Events: a list of significant events which happened on the provided day and month and which are not covered by the other types yet
   *
   * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
   */
  onThisDay: {
    parameters: {
      path: {
        /** @description Type of events */
        type: "all" | "selected" | "births" | "deaths" | "events" | "holidays";
        /** @description Month events are requested for, 0-padded */
        mm: string;
        /** @description Day of the month events are requested for, 0-padded */
        dd: string;
      };
    };
    responses: {
      /** @description JSON containing all of the featured content */
      200: {
        content: {
          "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/onthisday/0.3.3\"": components["schemas"]["onthisdayResponse"];
        };
      };
      /** @description No data found for the requested date */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Unsupported language */
      501: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Transform Wikitext to Mobile HTML
   * @description Transform wikitext to Mobile HTML.
   *
   * - Stability: [stable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Stable)
   * - Rate limit: 25 req/s (5 req/s when `stash: true`)
   *
   * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
   */
  transformWikitextToMobileHtml: {
    parameters: {
      header?: {
        /** @description The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language. */
        "Accept-Language"?: string;
        /** @description Output mode for mobile-html. Default is `editPreview`. */
        "output-mode"?: "editPreview" | "contentAndReferences" | "content" | "references";
      };
      path: {
        /** @description Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`. */
        title: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** @description The Wikitext to transform to HTML */
          wikitext: string;
        };
      };
    };
    responses: {
      /** @description See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec */
      200: {
        content: {
          "text/html; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Mobile-HTML/1.0.0\"": string;
        };
      };
      /** @description Unknown page title */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Machine-translate content
   * @description Fetches the machine translation for the posted content from the source
   * to the language of this wiki.
   *
   * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
   */
  doMT: {
    parameters: {
      path: {
        /** @description The source language code */
        from: string;
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description The HTML content to translate */
          html: string;
        };
      };
    };
    responses: {
      /** @description The translated content */
      200: {
        content: {
          "application/json": components["schemas"]["cx_mt"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Machine-translate content
   * @description Fetches the machine translation for the posted content from the source
   * to the language of this wiki.
   *
   * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
   */
  doMTProvider: {
    parameters: {
      path: {
        /** @description The source language code */
        from: string;
        /** @description The machine translation provider id */
        provider: "Apertium" | "Yandex" | "Youdao";
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** @description The HTML content to translate */
          html: string;
        };
      };
    };
    responses: {
      /** @description The translated content */
      200: {
        content: {
          "application/json": components["schemas"]["cx_mt"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Fetch the dictionary meaning of a word
   * @description Fetches the dictionary meaning of a word from a language and displays
   * it in the target language.
   *
   * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
   */
  doDict: {
    parameters: {
      path: {
        /** @description The source language code */
        from: string;
        /** @description The word to lookup */
        word: string;
      };
    };
    responses: {
      /** @description the dictionary translation for the given word */
      200: {
        content: {
          "application/json": components["schemas"]["cx_dict"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Fetch the dictionary meaning of a word
   * @description Fetches the dictionary meaning of a word from a language and displays
   * it in the target language.
   *
   * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
   */
  doDictProvider: {
    parameters: {
      path: {
        /** @description The source language code */
        from: string;
        /** @description The word to lookup */
        word: string;
        /** @description The dictionary provider id */
        provider: "JsonDict" | "Dictd";
      };
    };
    responses: {
      /** @description the dictionary translation for the given word */
      200: {
        content: {
          "application/json": components["schemas"]["cx_dict"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get citation data given an article identifier.
   * @description Generates citation data given a URL, DOI, PMID, or PMCID.
   *
   * Automated requests can be made at a rate of 1 request per second (rps).
   *
   * See more at [Citoid service documentation](https://www.mediawiki.org/wiki/Citoid)
   *
   * The citation data can be requested in one of the following formats:
   *   - `mediawiki`: format designed for MediaWiki to be used with `templateData`.
   *     Uses [Zotero field names](https://aurimasv.github.io/z2csl/typeMap.xml).
   *   - `mediawiki-basefields`: `mediawiki` format with Zotero `basefield` field names.
   *   - `zotero`: format used by [Zotero](https://www.zotero.org/).
   *   - `bibtex`: format used in conjunction with LaTeX documents.
   *     See [bibtex.org](http://www.bibtex.org/).
   *   - `wikibase`: format designed for [Wikibase](https://www.mediawiki.org/wiki/Extension:Wikibase_Repository).
   *
   * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
   */
  getCitation: {
    parameters: {
      header?: {
        /** @description For some articles the result depends on the `Accept-Language` header, so provide it if localized content is required. */
        "Accept-Language"?: string;
      };
      path: {
        /** @description The format to use for the resulting citation data */
        format: "mediawiki" | "mediawiki-basefields" | "zotero" | "bibtex" | "wikibase";
        /** @description URL of an article, DOI, PMCID or PMID in the URL-encoded format. Note that on the Swagger-UI doc page you don't need to URI-encode the parameter manually, it will be done by the docs engine. */
        query: string;
      };
    };
    responses: {
      /** @description The citation data in the requested format */
      200: {
        content: {
          "application/json; charset=utf-8;": components["schemas"]["result"];
          "application/x-bibtex; charset=utf-8": components["schemas"]["result"];
        };
      };
      /** @description Citation data was not found. */
      404: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
  /**
   * Get all entries of a given list.
   * @description Returns pages contained by the given list. Might be truncated and include
   * a continuation token.
   *
   * List must belong to current user and request must be authenticated with
   * a MediaWiki session cookie.
   *
   * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
   */
  getListEntries: {
    parameters: {
      query?: {
        /** @description Continuation parameter from previous request */
        next?: string;
        /**
         * @description Sort order
         * - `name`: by page title, ascending;
         * - `updated`: by last modification date, descending.
         */
        sort?: "name" | "updated";
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description An array of list entries. */
      200: {
        content: {
          "application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Lists/0.1\"": {
            entries?: components["schemas"]["list_entry_read"][];
            /** @description Continuation token. */
            next?: string;
          };
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["problem"];
        };
      };
    };
  };
}
